# .github/workflows/deploy.yml
name: WattsMyBill CI/CD Pipeline - React + FastAPI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GAR_LOCATION: australia-southeast1
  REPOSITORY: wattsmybill
  SERVICE: wattsmybill-app
  REGION: australia-southeast1

jobs:
  # Testing and Quality Checks
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'wattsmybill-frontend/package-lock.json'
        cache: 'npm'
        cache-dependency-path: 'wattsmybill-frontend/package-lock.json'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 safety bandit

    - name: Install React dependencies
      run: |
        cd wattsmybill-frontend
        npm ci

    - name: Build React app (test build)
      run: |
        cd wattsmybill-frontend
        npm run build

    - name: Code formatting check (Black)
      run: black --check --diff .
      continue-on-error: true

    - name: Linting (Flake8)
      run: flake8 src/ --max-line-length=120 --ignore=E203,W503
      continue-on-error: true

    - name: Security scan (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency vulnerability scan (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Run Python unit tests
      run: |
        # Test core components
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Test React app
      run: |
        cd wattsmybill-frontend
        npm test -- --coverage --testResultsProcessor=jest-junit --watchAll=false
      continue-on-error: true

    - name: Test FastAPI endpoints
      run: |
        # Start FastAPI in background
        python main.py &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8501/health || exit 1
        curl -f http://localhost:8501/api || exit 1
        
        # Kill background process
        pkill -f "python main.py"
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          htmlcov/
          coverage/
          *.json
          *.xml

  # Build and Deploy to Development
  deploy-dev:
    name: Deploy to Development
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment: development
    
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_DEV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'wattsmybill-frontend/package-lock.json'

      - name: Build React frontend
        run: |
          echo "üèóÔ∏è Building React frontend for development..."
          cd wattsmybill-frontend
          npm ci --only=production
          npm run build
          cd ..
          
          echo "üìÇ Copying React build to static directory..."
          cp -r wattsmybill-frontend/build ./static
          
          echo "‚úÖ React build complete:"
          ls -la static/

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY_DEV }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Configure Docker to use gcloud as credential helper"
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: "Build Docker image (React + FastAPI)"
        run: |
          echo "üê≥ Building Docker image with React + FastAPI..."
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-dev:$GITHUB_SHA" \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-dev:latest" \
            -f deployment/cloud_run/Dockerfile.dev \
            .
      
      - name: "Push Docker image to Artifact Registry"
        run: |
          echo "üì§ Pushing to development project: $PROJECT_ID"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-dev:$GITHUB_SHA"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-dev:latest"

      - name: 'Deploy to Cloud Run Development'
        run: |
          echo "üöÄ Deploying to Cloud Run Development..."
          gcloud run deploy $SERVICE-dev \
            --image "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE-dev:$GITHUB_SHA" \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 0 \
            --max-instances 10 \
            --port 8501 \
            --set-env-vars "ENVIRONMENT=development" \
            --set-env-vars "DEBUG=true" \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
            --service-account "${{ secrets.CLOUD_RUN_SA_DEV }}" \
            --timeout 3600

      - name: 'Test React + FastAPI deployment'
        run: |
          echo "üß™ Testing development deployment..."
          DEV_URL=$(gcloud run services describe $SERVICE-dev --region=$REGION --format='value(status.url)')
          
          # Test FastAPI health
          curl -f "$DEV_URL/health" || exit 1
          echo "‚úÖ Health check passed"
          
          # Test React app serving
          curl -f "$DEV_URL/" || exit 1
          echo "‚úÖ React app serving"
          
          # Test API endpoints
          curl -f "$DEV_URL/api" || exit 1
          echo "‚úÖ API endpoints working"
          
          echo "üéâ Development deployment successful: $DEV_URL"

  # Deploy to Production (main branch only)
  deploy-prod:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build React frontend for production
      run: |
        echo "üèóÔ∏è Building React frontend for production..."
        cd wattsmybill-frontend
        npm ci --only=production
        
        # Set production environment variables
        echo "REACT_APP_API_URL=/api" > .env.production.local
        
        npm run build
        cd ..
        
        echo "üìÇ Copying React build to static directory..."
        cp -r wattsmybill-frontend/build ./static
        
        echo "‚úÖ Production React build complete:"
        ls -la static/
        echo "üìä Build size:"
        du -sh static/

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY_PROD }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Configure Docker to use gcloud as credential helper'
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: 'Build production Docker image'
      run: |
        echo "üê≥ Building production Docker image (React + FastAPI)..."
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA" \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest" \
          -f deployment/cloud_run/Dockerfile.prod \
          .

    - name: 'Push Docker image to Artifact Registry'
      run: |
        echo "üì§ Pushing to production project: $PROJECT_ID"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:latest"

    - name: 'Deploy to Cloud Run Production'
      run: |
        echo "üöÄ Deploying to Cloud Run Production..."
        gcloud run deploy $SERVICE \
          --image "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE:$GITHUB_SHA" \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 4 \
          --min-instances 1 \
          --max-instances 50 \
          --port 8501 \
          --set-env-vars "ENVIRONMENT=production" \
          --set-env-vars "DEBUG=false" \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --service-account "${{ secrets.CLOUD_RUN_SA_PROD }}" \
          --timeout 3600 \
          --cpu-throttling \
          --execution-environment gen2

    - name: 'Comprehensive production testing'
      run: |
        echo "üß™ Running comprehensive production tests..."
        PROD_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
        
        # Health check
        echo "Testing health endpoint..."
        curl -f "$PROD_URL/health" || exit 1
        echo "‚úÖ Health check passed"
        
        # React app
        echo "Testing React app..."
        curl -f "$PROD_URL/" || exit 1
        echo "‚úÖ React app serving"
        
        # API endpoints
        echo "Testing API endpoints..."
        curl -f "$PROD_URL/api" || exit 1
        echo "‚úÖ API endpoints working"
        
        # Static files
        echo "Testing static file serving..."
        curl -f "$PROD_URL/static/js/" || echo "Static JS directory check (expected to fail)"
        curl -f "$PROD_URL/favicon.ico" || echo "Favicon check (may fail)"
        
        echo "üéâ Production deployment successful: $PROD_URL"
        echo "PRODUCTION_URL=$PROD_URL" >> $GITHUB_ENV

    - name: 'Create GitHub Release'
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          üöÄ Production deployment successful!
          
          **Deployed to:** ${{ env.PRODUCTION_URL }}
          **Region:** ${{ env.REGION }}
          **Commit:** ${{ github.sha }}
          **Deployed by:** ${{ github.actor }}
          
          ## Architecture
          - ‚öõÔ∏è React Frontend (Modern UI)
          - üêç FastAPI Backend (Real AI Agents)
          - ü§ñ Google Cloud ADK Integration
          - üåê Single Container Deployment
          
          ## Changes in this release
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    environment: production
    
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}
    
    steps:
    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY_PROD }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Rollback to previous version'
      run: |
        echo "üîÑ Starting rollback process..."
        
        # Get previous revision
        PREVIOUS_REVISION=$(gcloud run revisions list \
          --service=$SERVICE \
          --region=$REGION \
          --format="value(metadata.name)" \
          --limit=2 | tail -1)
        
        echo "Rolling back to revision: $PREVIOUS_REVISION"
        
        # Update traffic to previous revision
        gcloud run services update-traffic $SERVICE \
          --region=$REGION \
          --to-revisions=$PREVIOUS_REVISION=100
        
        # Test the rollback
        PROD_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
        curl -f "$PROD_URL/health" || exit 1
        
        echo "‚úÖ Rollback completed successfully"